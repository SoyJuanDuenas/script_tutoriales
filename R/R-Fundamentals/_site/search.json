[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Primeros Pasos",
    "section": "",
    "text": "R es un lenguaje de programación y entorno de desarrollo estadistico gratuito y de codigo abierto, cualquier persona puede descargarlo utilizarlo y modificarlo esto permite que tenga una gran comunidad y documentación bien detallada de cada una de sus funcionalidades y paquetes, R es orientado a objetos lo que significa que los datos se organizan en objetos que se pueden manipular y analizar, R cuenta con una interfaz gráfica de usuario llamada RStudio que facilita el trabajo con el lenguaje y permite la creación y visualización de datos de manera sencilla.\nR permite hacer diferentes tipos de analisis, Estadistica Descriptiva, Estadistica Bayesiana, Modelos Estado Espacio, entre otros es decir en R podemos hacer macroeconometria, microeconometria, econometría fianciera, evaluación de impacto, econometría bayesiana, econometria espacial entre otros analisis estadisticos."
  },
  {
    "objectID": "index.html#acerca-de-r",
    "href": "index.html#acerca-de-r",
    "title": "Primeros Pasos",
    "section": "Acerca de R",
    "text": "Acerca de R\nR es un lenguaje de programación y entorno de desarrollo estadistico gratuito y de codigo abierto, cualquier persona puede descargarlo utilizarlo y modificarlo esto permite que tenga una gran comunidad y documentación bien detallada de cada una de sus funcionalidades y paquetes, R es orientado a objetos lo que significa que los datos se organizan en objetos que se pueden manipular y analizar, R cuenta con una interfaz gráfica de usuario llamada RStudio que facilita el trabajo con el lenguaje y permite la creación y visualización de datos de manera sencilla.\nR permite hacer diferentes tipos de analisis, Estadistica Descriptiva, Estadistica Bayesiana, Modelos Estado Espacio, entre otros es decir en R podemos hacer macroeconometria, microeconometria, econometría fianciera, evaluación de impacto, econometría bayesiana, econometria espacial entre otros analisis estadisticos."
  },
  {
    "objectID": "index.html#interfaz-de-rstudio",
    "href": "index.html#interfaz-de-rstudio",
    "title": "Primeros Pasos",
    "section": "Interfaz de RStudio",
    "text": "Interfaz de RStudio\nRStudio proporciona una interfaz gráfica de usuario (GUI) que facilita el trabajo con R, lo que lo hace más accesible para los usuarios que no están familiarizados con la programación en línea de comandos.\nAl ingresar a RStudio nos vamos a encontrar con cuatro principales paneles:\n\n\nEditor : En el editor será donde colocaremos el codigo y los comandos de ejecución.\nConsola: Alli veremos los resultados o los outputs del codigo.\nEspacio de Trabajo: Aqui podemos ver el historial de comandos que hemos usado, las diferentes variables, datasets, objetos y funciones que hemos declarado entre otras cosas\nArchivos / graficas / paquetes: Allí podremos visualizar los plots que generemos en el codigo, las librerias que tengamos instaladas, los archivos de nuestro PC entre otros\n\nNos vamos a centrar en el trabajo que se hace en el primer panel."
  },
  {
    "objectID": "index.html#comentarios",
    "href": "index.html#comentarios",
    "title": "Primeros Pasos",
    "section": "Comentarios",
    "text": "Comentarios\nEs una buena practica comentar nuestro codigo, esto significa ir colocando texto no ejecutable que explique que esta haciendo nuestro codigo, esto facilitará más adelante nuestra vida al corregir el codigo y a otras personas que quieran entender lo que estamos haciendo, para comentar el codigo usamos el #, con esto el texto que se encuentre despues del numeral no será ejecutado.\n\n#Esto es un comentario"
  },
  {
    "objectID": "index.html#paquetes-y-limpieza-de-entorno",
    "href": "index.html#paquetes-y-limpieza-de-entorno",
    "title": "Primeros Pasos",
    "section": "Paquetes y limpieza de entorno",
    "text": "Paquetes y limpieza de entorno\nR siempre guarda las diferentes variables, datasets entre otros objetos, es por esto que es una buena practica al principio de cada codigo limipar nuestro entorno, esto lo hacemos con el siguiente comando.\n\nremove(list = ls())\n\nDado que R es un lenguaje Open Source, los usuarios pueden crear paquetes para facilitar o realizar nuevas operaciones que el R base no puede, sin embargo para hacer uso de estos paquetes debemos instalarlos y luego activarlos, la instalación solo se hace una vez, la activación si debe hacerse en cada codigo que deseemos volver a abrir RStudio, es una buena practica activar todos los paquetes en las primeras lineas de codigo.\n\noptions(repos = c(CRAN = \"http://cran.rstudio.com\"))\ninstall.packages(\"tinytex\")\ninstall.packages(\"TeX\") \ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tinytex)"
  },
  {
    "objectID": "index.html#operadores-aritmeticos",
    "href": "index.html#operadores-aritmeticos",
    "title": "Primeros Pasos",
    "section": "Operadores Aritmeticos",
    "text": "Operadores Aritmeticos\nR incluye varios operadores aritmeticos que se utilizan para realizar operaciones matematicas. Los operadores aritmeticos incluyen:\n\n+ : Suma dos números\n- : Resta dos números\n* : Multiplica dos números\n/ : Divide dos números\n** : Eleva un número a una potencia"
  },
  {
    "objectID": "index.html#variables-y-tipos-de-objetos",
    "href": "index.html#variables-y-tipos-de-objetos",
    "title": "Primeros Pasos",
    "section": "Variables y tipos de objetos",
    "text": "Variables y tipos de objetos\nDiremos que una variable es un “contenedor de información” en la que podemos “guardar” diferntes objetos, generalmente se escriben en minúscula, sin espacios ni tildes, comas, puntos, signos de interrogación o cualquier otro caracter a excepción del guión bajo, para declarar variable en R podemos usar <- como tambien =\nPara notación de este trabajo usaremos unicamente el igual.\n\nnombre_de_la_variable <- \"Valor de la variable\"\nnombre_de_la_variable = \"Valor de la variable\"\n\npara visualizar nuestra variable en la consola (Panel #2) solo basta con llamarla de nuevo o utilizar la función print, o podemos usar un ; y volver a llamar la funciín en la misma linea\n\nnombre_de_la_variable\n\n[1] \"Valor de la variable\"\n\nprint(nombre_de_la_variable)\n\n[1] \"Valor de la variable\"\n\nnombre_de_la_variable = \"Valor de la variable\"; nombre_de_la_variable\n\n[1] \"Valor de la variable\"\n\n\nLos objetos que guardamos en las variables pueden ser de diferentes tipos y en función de esto la forma de guardarlos cambia.\n\nobjeto_numeric = 3\nobjeto_logic = FALSE\nobjeto_character = \"Hola Mundo\"\nobjeto_complex = 1+0i\n\nPara verificar de que tipo o clase es un objeto podemos usar la función class, puede darse el caso de que requiero convertir un objeto de un tipo a otro tipo, para esto debo usar alguna de las siguientes funciones según corresponda\n\nx = 1\nclass(x)\n\n[1] \"numeric\"\n\nas.numeric(x)\n\n[1] 1\n\nas.logical(x)\n\n[1] TRUE\n\nas.character(x)\n\n[1] \"1\"\n\n\nPara hacer operaciones entre variables nos aseguramos que las variables sean de tipo numerico y operamos:\n\na = 5\nb = 7\n\nc = a + b\nc\n\n[1] 12"
  },
  {
    "objectID": "index.html#vectores",
    "href": "index.html#vectores",
    "title": "Primeros Pasos",
    "section": "Vectores",
    "text": "Vectores\nLos vectores son entes matematicos que se usan para guardar datos de cierto tipo especifico, para crear vectores en R debemos usar el comando C, los vectores nos permiten hacer operaciones entre varios datos al mismo tiempo sin tener que recurrir a bucles\n\nmi_primer_vector = c(25,5,3,6,3,6)\nvector_dos = c(\"Hola\", \"mundo\")\nvector_tres = c(FALSE, TRUE, FALSE, TRUE)\n\nComo los vectores solamente pueden guardar un tipo de dato si llegamos a introducir diferentes tipos de datos el vector automaticamente va a transformar estos datos para que el vector quede solamente en función de un tipo de dato.\n\ny <- c(1.7, \"a\")   ## character\ny <- c(TRUE, 2)    ## numeric\ny <- c(\"a\", TRUE)  ## character\n\nPodemos crear vectores con determinadas caracteristicas de maneras mucho más eficientes, por ejemplo:\n\n#Crear un vector secuencia 1 a 1.\nDias = 0:15; Dias\n\n [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n#Crar un vector secuencia que avance cada j unidades: seq(a,b,j)\nMedicion = seq(1,5, 0.5); Medicion\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\n#Crear un vector donde los objetos se repiten n veces: rep(objeto,n)\nNumerico = rep(1,10); Numerico\n\n [1] 1 1 1 1 1 1 1 1 1 1\n\n#Crear un vector de repeticiones\nDummy = c(rep(0,5), rep(1,10), rep(0,5)); Dummy\n\n [1] 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0\n\n\nPara concatenar vectores simplemente debemos:\n\nvector_a = c(2,54,3)\nvector_b = c(3,7,8)\nvector_c = c(vector_a, vector_b); vector_c\n\n[1]  2 54  3  3  7  8\n\n\nLas operaciones con vectores funcionan de manera similar a las operaciones con variables, en ultimas seguimos operando variables solo que en este caso las variables no contienen un solo valor sino contienen un vector de valores, los vectores entre si deben ser iguales o multiplos. En caso de ser iguales se hará la operación uno a uno, en cambio si son multiplos se repetira la operación en los diferentes vectores, tal que:\n\n#Operación uno a uno\nvector_a = c(2,54,3)\nvector_b = c(3,7,8)\nvector_c = vector_a + vector_b; vector_c\n\n[1]  5 61 11\n\n#Operación entre multiplos\nvector_a = c(2,54,3,4,8,5)\nvector_b = c(3,7,8)\nvector_c = vector_a + vector_b; vector_c\n\n[1]  5 61 11  7 15 13\n\n\npodemos hacer estadistica descriptiva de los vectores usando la función summary\n\nsummary(vector_a)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2.00    3.25    4.50   12.67    7.25   54.00 \n\n\nentre otros posibles metodos de la clase vector\n\n#describir cuales son los elementos que no se repiten del vector\nunique(vector_a)\n\n[1]  2 54  3  4  8  5\n\n#Ordenar elementos de menor a mayor\nsort(vector_a)  \n\n[1]  2  3  4  5  8 54\n\n#Posición ordenada de menor a mayor\norder(vector_a) \n\n[1] 1 3 4 6 5 2\n\n#Ordenar elementos de mayor a menor:\nsort(vector_a, decreasing = TRUE)       \n\n[1] 54  8  5  4  3  2"
  },
  {
    "objectID": "index.html#matrices",
    "href": "index.html#matrices",
    "title": "Primeros Pasos",
    "section": "Matrices",
    "text": "Matrices\nUna matriz es una estructura de datos bidimensional que consiste en una colección de elementos organizados en filas y columnas. Se puede representar como una tabla o cuadrícula de números o valores. Cada elemento en la matriz se identifica por su posición, que se determina por el número de fila y el número de columna.\nPara crear matrices en R podemos hacerlo directamente o a partir de vectores previamente creados, para crear matrices directamente usamos:\n\nMAT1=matrix(1:10,nrow = 5,byrow = TRUE);MAT1 \n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n[4,]    7    8\n[5,]    9   10\n\nMAT2=matrix(10:19,ncol=5, nrow = 2, byrow = FALSE);MAT2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10   12   14   16   18\n[2,]   11   13   15   17   19\n\n\ndonde el primer parametro corresponde a con que vamos a llenar esas matrices, este intervalo debe ser multiplo del numero de filas o columnas que queremos crear, el segundo si vamos a hacer la creación de la matriz desde la columna o desde las filas, podemos hacerlo tambien desde ambas.\nAhora bien, si queremos crear matrices a partir de vectores ya establecidos previamente usaremos el siguiente codigo:\n\na = c(1,4,5,7,9,7,10,6,5,7,9)\nb = c(3,4,6,8,2,3,11,1,2,5,6)\nMAT3 = cbind(a,b); MAT3\n\n       a  b\n [1,]  1  3\n [2,]  4  4\n [3,]  5  6\n [4,]  7  8\n [5,]  9  2\n [6,]  7  3\n [7,] 10 11\n [8,]  6  1\n [9,]  5  2\n[10,]  7  5\n[11,]  9  6\n\nMAT4 = rbind(a,b); MAT4 \n\n  [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]\na    1    4    5    7    9    7   10    6    5     7     9\nb    3    4    6    8    2    3   11    1    2     5     6\n\n\ncomo nos podemos dar cuenta al usar vectores tambien podemos crear las matrices desde las filas o desde las columnas\n\nOperaciones entre matrices\nComo sabemos las matrices tienen formas de operarse de manera diferente a los escalares o constantes, por lo cual vamos a detallar cada una de las operaciones principales:\n\n#Suma escalar - matriz\nMAT1 + 10\n\n     [,1] [,2]\n[1,]   11   12\n[2,]   13   14\n[3,]   15   16\n[4,]   17   18\n[5,]   19   20\n\n#Suma matriz - matriz\nMAT3 + t(MAT4)\n\n       a  b\n [1,]  2  6\n [2,]  8  8\n [3,] 10 12\n [4,] 14 16\n [5,] 18  4\n [6,] 14  6\n [7,] 20 22\n [8,] 12  2\n [9,] 10  4\n[10,] 14 10\n[11,] 18 12\n\n#Multiplicar escalar - matriz\nMAT3*10\n\n        a   b\n [1,]  10  30\n [2,]  40  40\n [3,]  50  60\n [4,]  70  80\n [5,]  90  20\n [6,]  70  30\n [7,] 100 110\n [8,]  60  10\n [9,]  50  20\n[10,]  70  50\n[11,]  90  60\n\n\nPodemos a su vez tambien crear nuevas matrices especiales\n\n#Matriz Transpuesta: t() \nt(MAT1) \n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n#Matriz identidad: diag()\ndiag(5)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n\n#Matriz diagonal: diag()\nMat_diag = diag(1:10)\n\nFinalmente calcularemos la multiplicación matricial que recordemos no se hace punto a punto sino por medio de un proceso diferente, tambien la inversa de una matriz y la determinante\n\n#Producto de matrices\ndim(MAT3) #conocer las dimensiones de una matriz: 11x2\n\n[1] 11  2\n\ndim(MAT4) #2x11, son multiplicable. por ende:\n\n[1]  2 11\n\nMAT3%*%MAT4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]\n [1,]   10   16   23   31   15   16   43    9   11    22    27\n [2,]   16   32   44   60   44   40   84   28   28    48    60\n [3,]   23   44   61   83   57   53  116   36   37    65    81\n [4,]   31   60   83  113   79   73  158   50   51    89   111\n [5,]   15   44   57   79   85   69  112   56   49    73    93\n [6,]   16   40   53   73   69   58  103   45   41    64    81\n [7,]   43   84  116  158  112  103  221   71   72   125   156\n [8,]    9   28   36   50   56   45   71   37   32    47    60\n [9,]   11   28   37   51   49   41   72   32   29    45    57\n[10,]   22   48   65   89   73   64  125   47   45    74    93\n[11,]   27   60   81  111   93   81  156   60   57    93   117\n\n#Inversa de una matriz: solve()\nsolve(Mat_diag)\n\n      [,1] [,2]      [,3] [,4] [,5]      [,6]      [,7]  [,8]      [,9] [,10]\n [1,]    1  0.0 0.0000000 0.00  0.0 0.0000000 0.0000000 0.000 0.0000000   0.0\n [2,]    0  0.5 0.0000000 0.00  0.0 0.0000000 0.0000000 0.000 0.0000000   0.0\n [3,]    0  0.0 0.3333333 0.00  0.0 0.0000000 0.0000000 0.000 0.0000000   0.0\n [4,]    0  0.0 0.0000000 0.25  0.0 0.0000000 0.0000000 0.000 0.0000000   0.0\n [5,]    0  0.0 0.0000000 0.00  0.2 0.0000000 0.0000000 0.000 0.0000000   0.0\n [6,]    0  0.0 0.0000000 0.00  0.0 0.1666667 0.0000000 0.000 0.0000000   0.0\n [7,]    0  0.0 0.0000000 0.00  0.0 0.0000000 0.1428571 0.000 0.0000000   0.0\n [8,]    0  0.0 0.0000000 0.00  0.0 0.0000000 0.0000000 0.125 0.0000000   0.0\n [9,]    0  0.0 0.0000000 0.00  0.0 0.0000000 0.0000000 0.000 0.1111111   0.0\n[10,]    0  0.0 0.0000000 0.00  0.0 0.0000000 0.0000000 0.000 0.0000000   0.1\n\n#Determinante de la matriz: det()\ndet(Mat_diag)\n\n[1] 3628800\n\n\nEstos anteriores procesos si no cumplen con determinadas caracteristicas no se pueden llevar a cabo, solo se puede invertir matrices invertibles, es decir que su determinante sea diferente de 0, entre otras caracteristicas\npara acceder a elementos especificos de la matriz debemos hacer uso del indice en formato (x,y) tal que sea (fila, columna)\n\nMAT2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10   12   14   16   18\n[2,]   11   13   15   17   19\n\n#Mostrar el elemento ij de la matriz: MAT[i,j]\nMAT2[2,1]\n\n[1] 11\n\nMAT2[1,2]\n\n[1] 12\n\n\npodemos hacer esto tambien para mostrar solo una fila o solo una columna de la matriz\n\nMAT2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10   12   14   16   18\n[2,]   11   13   15   17   19\n\n#Mostrar los elementos de la fila i: MAT[i,]\nMAT2[1,]\n\n[1] 10 12 14 16 18\n\n#Mostrar los elmentos de la columna j: MAT[,j]\nMAT2[,1]\n\n[1] 10 11\n\n\npara mejor entendimiento de nuestra matriz podemos cambiarle los nombres a las filas y las columnas, esto tambien nos facilitará el trabajo posterior\n\nrownames(MAT1) = c(\"a\",\"b\",\"c\",\"d\",\"e\")\ncolnames(MAT1) = c(\"f\",\"g\")\nMAT1\n\n  f  g\na 1  2\nb 3  4\nc 5  6\nd 7  8\ne 9 10"
  },
  {
    "objectID": "index.html#operadores-logicos-y-de-comparación",
    "href": "index.html#operadores-logicos-y-de-comparación",
    "title": "Primeros Pasos",
    "section": "Operadores logicos y de comparación",
    "text": "Operadores logicos y de comparación\nLos operadores logicos se utilizan para combinar expresiones lógicas y producir un resultado verdadero o falso. Además, se pueden utilizar los operadores de comparación para crear expresiones lógicas. Los operadores logicos y de comparación entre vectores de las matrices son los siguientes:\n\n#Elementos mayores o iguales a j en el vector\na>=4\n\n [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n#Elementos menores o iguales a j en el vector\na<=4\n\n [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n#Elementos iguales a j en el vector\na==4\n\n [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n#Elementos diferentes a i en el vector\nb!=6\n\n [1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n\n#Dos afirmaciones verdaderas: \"&\"\na>=1 & b==3 # Recuerden que & es un \"y\" matemático\n\n [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n\n#Al menos una es cierta: \"|\"\na>=1 | b==3 # Recuerden que | es un \"o\" matemático\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n#Negación: \"!\"\n!a < 0 #a no es menor que cero\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "index.html#na-y-nan",
    "href": "index.html#na-y-nan",
    "title": "Primeros Pasos",
    "section": "Na y NaN",
    "text": "Na y NaN\nCuando el codigo nos reporta un dato Na tenemos un missing value, es decir, datos vacios. Por otra parte cuando tenemos un NaN se traduce como un “non a number” es decir que el resultado de la operación no se puede calcular dado que es indeterminado"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "En este documento se abordarán los fundamentos del lenguaje de programación estadística R. R es uno de los lenguajes más populares para el análisis de datos y la ciencia de datos y es utilizado por muchos profesionales y organizaciones en todo el mundo. El objetivo de este documento es proporcionar una guía práctica para aquellos que quieren aprender a programar en R, así como para aquellos que ya tienen experiencia en R pero quieren mejorar sus habilidades y ampliar sus conocimientos.\nEste documento está diseñado para ser utilizado como una referencia práctica para aquellos que trabajan con R en su trabajo o proyectos personales. Al final del documento, se espera que los lectores tengan las habilidades necesarias para trabajar con datos en R y aplicar técnicas de análisis de datos y visualización en sus proyectos de ciencia de datos."
  }
]